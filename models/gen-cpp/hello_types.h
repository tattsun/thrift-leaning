/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hello_TYPES_H
#define hello_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace hello {

class Human;

typedef struct _Human__isset {
  _Human__isset() : name(false), age(false) {}
  bool name :1;
  bool age :1;
} _Human__isset;

class Human {
 public:

  Human(const Human&);
  Human& operator=(const Human&);
  Human() : name(), age(0) {
  }

  virtual ~Human() throw();
  std::string name;
  int32_t age;

  _Human__isset __isset;

  void __set_name(const std::string& val);

  void __set_age(const int32_t val);

  bool operator == (const Human & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    return true;
  }
  bool operator != (const Human &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Human & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Human &a, Human &b);

inline std::ostream& operator<<(std::ostream& out, const Human& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
